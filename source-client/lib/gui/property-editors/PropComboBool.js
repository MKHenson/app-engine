var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Animate;
(function (Animate) {
    /**
    * This represents a combo property for booleans that the user can select from a list.
    */
    var PropComboBool = (function (_super) {
        __extends(PropComboBool, _super);
        function PropComboBool(grid) {
            _super.call(this, grid);
        }
        /**
        * Called when a property grid is editing an object. The property name, value and type are passed.
        * If this editor can edit the property it returns a valid JQuery object which is responsible for editing
        * the object. The property grid makes no effort to maintain this. It is up to the Editor to watch the JQuery through
        * events to see when its been interacted with. Once its been edited, the editor must notify the grid - to do this
        * call the notify method.
        * @param {string} propertyName The name of the property we are creating an HTML element for
        * @param {any} propertyValue The current value of that property
        * @param {ParameterType} objectType The type of property we need to create
        * @returns {JQuery} A valid jQuery object or null if this editor does not support this property.
        */
        PropComboBool.prototype.edit = function (propertyName, propertyValue, objectType) {
            if (objectType != Animate.ParameterType.BOOL)
                return null;

            //Create HTML
            var editor = this.createEditorJQuery(propertyName, "<select class='prop-combo'></select>", propertyValue);

            var selector = jQuery("select", editor);

            //Boolean
            selector.append("<option value='true' " + (propertyValue ? "selected='selected'" : "") + ">True</option>");
            selector.append("<option value='false' " + (!propertyValue ? "selected='selected'" : "") + ">False</option>");

            var that = this;

            //Functions to deal with user interactions with JQuery
            var onSelect = function (e) {
                var val = selector.val();
                that.notify(propertyName, (val == "true" ? true : false), objectType);
            };

            //Add listeners
            selector.on("change", onSelect);

            //Finall return editor as HTML to be added to the page
            return editor;
        };

        /**
        * Updates the value of the editor object  because a value was edited externally.
        * @param {any} newValue The new value
        * @param {JQuery} editHTML The JQuery that was generated by this editor that needs to be updated because something has updated the value externally.
        */
        PropComboBool.prototype.update = function (newValue, editHTML) {
            //TODO
        };
        return PropComboBool;
    })(Animate.PropertyGridEditor);
    Animate.PropComboBool = PropComboBool;
})(Animate || (Animate = {}));
//# sourceMappingURL=PropComboBool.js.map
