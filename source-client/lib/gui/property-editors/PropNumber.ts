module Animate
{
	/**
	* A property editor which edits numbers
	*/
	export class PropNumber extends PropertyGridEditor
	{		
		constructor( grid: PropertyGrid )
		{
			super( grid );
		}

		/**
		* Called when a property grid is editing an object. The property name, value and type are passed.
		* If this editor can edit the property it returns a valid JQuery object which is responsible for editing
		* the object. The property grid makes no effort to maintain this. It is up to the Editor to watch the JQuery through
		* events to see when its been interacted with. Once its been edited, the editor must notify the grid - to do this
		* call the notify method.
		* @param {string} propertyName The name of the property we are creating an HTML element for
		* @param {any} propertyValue The current value of that property
		* @param {ParameterType} objectType The type of property we need to create
		* @param {any} options Any options associated with the parameter
		* @returns {JQuery} A valid jQuery object or null if this editor does not support this property.
		*/
		edit( propertyName: string, propertyValue: any, objectType: ParameterType, options: any ): JQuery
		{
			if ( objectType != ParameterType.NUMBER )
				return null;

			//Create HTML
			var num = propertyValue.selected || ( isNaN( parseFloat( propertyValue ) ) ? 0 : parseFloat( propertyValue ) );
			var min = propertyValue.min || -Infinity;
			var max = propertyValue.max || Infinity;
			var incrementAmount = propertyValue.interval || 1;

			if ( !num )
				num = 0;
			if ( !min )
				min = -9999;
			if ( !max )
				max = 9999;
			if ( !incrementAmount )
				incrementAmount = 1;

			var editor: JQuery =
				this.createEditorJQuery( propertyName, "<input type='text' class='PropTextbox' value = '" + num + "' ></input>", propertyValue );

			var that = this;

			//Function to deal with user interactions with JQuery
			var valueEdited: Function = function() 
			{
				var val: number = parseFloat( jQuery( "input", editor ).val() );
				if ( isNaN( val ) )
					val = 0;

				if ( val < min )
					val = min;
				if ( val > max )
					val = max;

				var num : number = val;
				that.notify( propertyName, { selected: val, min: min, max: max, interval : incrementAmount }, objectType );
			};

			//Add listeners
			jQuery( "input", editor ).val( num );
			jQuery( "input", editor ).on( "keyup", valueEdited );

			
			//This is for when the users press the up and down buttons on chrome
			jQuery( "input", editor ).on( "mouseup", valueEdited );
			jQuery( "input", editor ).jStepper( {
				allowDecimals: true,
				maxValue: max,
				minValue: min,
				normalStep: incrementAmount,
				onStep: valueEdited
			});

			//Finall return editor as HTML to be added to the page
			return editor;
		}

		/**
		* Updates the value of the editor object  because a value was edited externally.
		* @param {any} newValue The new value
		* @param {JQuery} editHTML The JQuery that was generated by this editor that needs to be updated because something has updated the value externally.
		*/
		update( newValue, editHTML )
		{
			jQuery( "input", editHTML ).val( ( newValue.selected !== undefined ? newValue.selected : newValue ) );
		}
	}
}