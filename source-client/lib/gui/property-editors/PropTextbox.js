var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Animate;
(function (Animate) {
    /**
    * A property editor which edits numbers, objects and strings
    */
    var PropTextbox = (function (_super) {
        __extends(PropTextbox, _super);
        function PropTextbox(grid) {
            _super.call(this, grid);
        }
        /**
        * Called when a property grid is editing an object. The property name, value and type are passed.
        * If this editor can edit the property it returns a valid JQuery object which is responsible for editing
        * the object. The property grid makes no effort to maintain this. It is up to the Editor to watch the JQuery through
        * events to see when its been interacted with. Once its been edited, the editor must notify the grid - to do this
        * call the notify method.
        * @param {string} propertyName The name of the property we are creating an HTML element for
        * @param {any} propertyValue The current value of that property
        * @param {ParameterType} objectType The type of property we need to create
        * @returns {JQuery} A valid jQuery object or null if this editor does not support this property.
        */
        PropTextbox.prototype.edit = function (propertyName, propertyValue, objectType) {
            if ((propertyValue == null && objectType == null || objectType == Animate.ParameterType.STRING || objectType == Animate.ParameterType.OBJECT || objectType == Animate.ParameterType.NUMBER) === false) {
                return null;
            }

            //Create HTML
            var isNumber = false;
            if (objectType == Animate.ParameterType.NUMBER)
                isNumber = true;

            if (propertyValue === undefined || propertyValue === null)
                propertyValue = "";

            var dataSplit = propertyValue.toString().split(":");
            var num = parseFloat(dataSplit.length > 0 ? dataSplit[0] : 0);
            var min = parseFloat(dataSplit.length > 1 ? dataSplit[1] : -9999);
            var max = parseFloat(dataSplit.length > 2 ? dataSplit[2] : 9999);
            var incrementAmount = parseFloat(dataSplit.length > 2 ? dataSplit[3] : 1);

            if (isNaN(num))
                num = 0;
            if (isNaN(min))
                min = -9999;
            if (isNaN(max))
                max = 9999;
            if (isNaN(incrementAmount))
                incrementAmount = 1;

            var editor = this.createEditorJQuery(propertyName, "<input type='text' class='PropTextbox' value = '" + (isNumber ? num : propertyValue.toString()) + "' ></input>", propertyValue);

            var that = this;

            //Function to deal with user interactions with JQuery
            var valueEdited = function () {
                if (isNumber) {
                    var val = parseFloat(jQuery("input", editor).val());
                    if (isNaN(val))
                        val = 0;

                    if (val < min)
                        val = min;
                    if (val > max)
                        val = max;

                    var num = val;
                    that.notify(propertyName, val.toString() + ":" + min + ":" + max + ":" + incrementAmount, objectType);
                } else
                    that.notify(propertyName, jQuery("input", editor).val(), objectType);
            };

            //Add listeners
            jQuery("input", editor).val((isNumber ? num : propertyValue.toString()));
            jQuery("input", editor).on("keyup", valueEdited);

            if (objectType == Animate.ParameterType.NUMBER) {
                if (isNumber)
                    jQuery("input", editor).on("mouseup", valueEdited);

                jQuery("input", editor).jStepper({
                    allowDecimals: true,
                    maxValue: max,
                    minValue: min,
                    normalStep: incrementAmount,
                    onStep: valueEdited
                });
            }

            //Finall return editor as HTML to be added to the page
            return editor;
        };

        /**
        * Updates the value of the editor object  because a value was edited externally.
        * @param {any} newValue The new value
        * @param {JQuery} editHTML The JQuery that was generated by this editor that needs to be updated because something has updated the value externally.
        */
        PropTextbox.prototype.update = function (newValue, editHTML) {
            jQuery("input", editHTML).val(newValue);
        };
        return PropTextbox;
    })(Animate.PropertyGridEditor);
    Animate.PropTextbox = PropTextbox;
})(Animate || (Animate = {}));
//# sourceMappingURL=PropTextbox.js.map
