var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Animate;
(function (Animate) {
    /**
    * An editor which allows a user to select files on the local server.
    */
    var PropFile = (function (_super) {
        __extends(PropFile, _super);
        function PropFile(grid) {
            _super.call(this, grid);
        }
        /**
        * Called when a property grid is editing an object. The property name, value and type are passed.
        * If this editor can edit the property it returns a valid JQuery object which is responsible for editing
        * the object. The property grid makes no effort to maintain this. It is up to the Editor to watch the JQuery through
        * events to see when its been interacted with. Once its been edited, the editor must notify the grid - to do this
        * call the notify method.
        * @param {string} propertyName The name of the property we are creating an HTML element for
        * @param {any} propertyValue The current value of that property
        * @param {ParameterType} objectType The type of property we need to create
        * @returns {JQuery} A valid jQuery object or null if this editor does not support this property.
        */
        PropFile.prototype.edit = function (propertyName, propertyValue, objectType) {
            if (objectType != Animate.ParameterType.FILE)
                return null;

            var parts = propertyValue.split("|");
            var fileID = parts[0];
            var fileExtensions = parts[1].split(",");
            var path = parts[2];
            var selectedExt = parts[3];

            var project = Animate.User.getSingleton().project;
            var file = project.getFile(fileID);

            //Create HTML
            var editor = this.createEditorJQuery(propertyName, "<div class='prop-file'><div class='file-name'>" + (file ? file.name : path) + "</div><div class='file-button reg-gradient'>...</div><div class='file-button-image'><img src='media/download-file.png'/></div></div>", propertyValue);

            var that = this;

            //Functions to deal with user interactions with JQuery
            var onFileChosen = function (response, event) {
                Animate.FileViewerForm.getSingleton().removeEventListener(Animate.FileViewerFormEvents.CANCELLED, onFileChosen);
                Animate.FileViewerForm.getSingleton().removeEventListener(Animate.FileViewerFormEvents.FILE_CHOSEN, onFileChosen);

                if (response == Animate.FileViewerFormEvents.CANCELLED)
                    return;

                var file = event.file;
                jQuery(".file-name", editor).text((file ? file.name : path));
                that.notify(propertyName, (file ? file.id : "") + "|" + parts[1] + "|" + (file ? file.path : "") + "|" + (file ? file.extension : ""), objectType);
            };

            var mouseUp = function (e) {
                if (jQuery(e.target).is(".file-button-image")) {
                    window.open(path, 'Download');
                    return;
                }

                //Remove any previous references
                Animate.FileViewerForm.getSingleton().removeEventListener(Animate.FileViewerFormEvents.CANCELLED, onFileChosen);
                Animate.FileViewerForm.getSingleton().removeEventListener(Animate.FileViewerFormEvents.FILE_CHOSEN, onFileChosen);
                Animate.FileViewerForm.getSingleton().addEventListener(Animate.FileViewerFormEvents.FILE_CHOSEN, onFileChosen);
                Animate.FileViewerForm.getSingleton().addEventListener(Animate.FileViewerFormEvents.CANCELLED, onFileChosen);
                Animate.FileViewerForm.getSingleton().showForm(fileID, fileExtensions);
            };

            //Add listeners
            editor.on("mouseup", mouseUp);

            //Finall return editor as HTML to be added to the page
            return editor;
        };

        /**
        * Updates the value of the editor object  because a value was edited externally.
        * @param {any} newValue The new value
        * @param {JQuery} editHTML The JQuery that was generated by this editor that needs to be updated because something has updated the value externally.
        */
        PropFile.prototype.update = function (newValue, editHTML) {
            jQuery("input", editHTML).val(newValue);
        };
        return PropFile;
    })(Animate.PropertyGridEditor);
    Animate.PropFile = PropFile;
})(Animate || (Animate = {}));
//# sourceMappingURL=PropFile.js.map
