module Animate
{
	/**
	* A property editor which edits objects and strings
	*/
	export class PropTextbox extends PropertyGridEditor
	{		
		constructor( grid: PropertyGrid )
		{
			super( grid );
		}

		/**
		* Called when a property grid is editing an object. The property name, value and type are passed.
		* If this editor can edit the property it returns a valid JQuery object which is responsible for editing
		* the object. The property grid makes no effort to maintain this. It is up to the Editor to watch the JQuery through
		* events to see when its been interacted with. Once its been edited, the editor must notify the grid - to do this
		* call the notify method.
		* @param {string} propertyName The name of the property we are creating an HTML element for
		* @param {any} propertyValue The current value of that property
		* @param {ParameterType} objectType The type of property we need to create
		* @param {any} options Any options associated with the parameter
		* @returns {JQuery} A valid jQuery object or null if this editor does not support this property.
		*/
		edit( propertyName: string, propertyValue: any, objectType: ParameterType, options: any ): JQuery
		{
			if ( ( propertyValue == null && objectType == null ||
				objectType == ParameterType.STRING ||
				objectType == ParameterType.OBJECT ) === false)
			{
				return null;
			}

			//Create HTML			
			if ( propertyValue === undefined || propertyValue === null )
				propertyValue = "";
			
			var editor: JQuery =
				this.createEditorJQuery( propertyName, "<input type='text' class='PropTextbox' value = '" +  propertyValue.toString() + "' ></input>", propertyValue );

			var that = this;

			//Function to deal with user interactions with JQuery
			var valueEdited: Function = function() 
			{
				that.notify( propertyName, jQuery( "input", editor ).val(), objectType );
			};

			//Add listeners
			jQuery( "input", editor ).val( propertyValue.toString() );
			jQuery( "input", editor ).on( "keyup", valueEdited );
			
			//Finall return editor as HTML to be added to the page
			return editor;
		}

		/**
		* Updates the value of the editor object  because a value was edited externally.
		* @param {any} newValue The new value
		* @param {JQuery} editHTML The JQuery that was generated by this editor that needs to be updated because something has updated the value externally.
		*/
		update( newValue, editHTML )
		{
			jQuery( "input", editHTML ).val( newValue );
		}
	}
}