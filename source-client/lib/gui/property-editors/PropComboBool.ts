module Animate
{
	/**
	* This represents a combo property for booleans that the user can select from a list.
	*/
	export class PropComboBool extends PropertyGridEditor
	{		
		constructor( grid: PropertyGrid )
		{
			super( grid );
		}

		/**
		* Called when a property grid is editing an object. The property name, value and type are passed.
		* If this editor can edit the property it returns a valid JQuery object which is responsible for editing
		* the object. The property grid makes no effort to maintain this. It is up to the Editor to watch the JQuery through
		* events to see when its been interacted with. Once its been edited, the editor must notify the grid - to do this
		* call the notify method.
		* @param {string} propertyName The name of the property we are creating an HTML element for
		* @param {any} propertyValue The current value of that property
		* @param {ParameterType} objectType The type of property we need to create
		* @param {any} options Any options associated with the parameter
		* @returns {JQuery} A valid jQuery object or null if this editor does not support this property.
		*/
		edit( propertyName: string, propertyValue: any, objectType: ParameterType, options: any ): JQuery
		{
			if (  objectType != ParameterType.BOOL  )
				return null;

			//Create HTML	
			var editor: JQuery =
				this.createEditorJQuery( propertyName, "<select class='prop-combo'></select>", propertyValue );

			var selector: JQuery = jQuery( "select", editor );

			//Boolean
			selector.append( "<option value='true' " + ( propertyValue ? "selected='selected'" : "" ) + ">True</option>" );
			selector.append( "<option value='false' " + ( !propertyValue ? "selected='selected'" : "" ) + ">False</option>" );
	

			var that = this;

			//Functions to deal with user interactions with JQuery
            var onSelect = function (e: JQueryEventObject  ) 
			{
				var val = selector.val();
				that.notify(propertyName, (val == "true" ? true : false), objectType );
			};
			
			//Add listeners
			selector.on( "change", onSelect );

			//Finall return editor as HTML to be added to the page
			return editor;
		}

		/**
		* Updates the value of the editor object  because a value was edited externally.
		* @param {any} newValue The new value
		* @param {JQuery} editHTML The JQuery that was generated by this editor that needs to be updated because something has updated the value externally.
		*/
		update( newValue, editHTML )
		{
			var selector: JQuery = jQuery( "select", editHTML );
			var target = "false";
			if ( newValue )
				target = "true";

			selector.val( target );
		}
	}
}