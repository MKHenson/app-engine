var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var Animate;
(function (Animate) {
    var PropColorPair = (function () {
        function PropColorPair(id, color) {
            this.id = id;
            this.color = color;
        }
        return PropColorPair;
    })();

    /**
    * This editor is used to pick colours from a colour dialogue.
    */
    var PropColorPicker = (function (_super) {
        __extends(PropColorPicker, _super);
        function PropColorPicker(grid) {
            _super.call(this, grid);
        }
        /**
        * Called when a property grid is editing an object. The property name, value and type are passed.
        * If this editor can edit the property it returns a valid JQuery object which is responsible for editing
        * the object. The property grid makes no effort to maintain this. It is up to the Editor to watch the JQuery through
        * events to see when its been interacted with. Once its been edited, the editor must notify the grid - to do this
        * call the notify method.
        * @param {string} propertyName The name of the property we are creating an HTML element for
        * @param {any} propertyValue The current value of that property
        * @param {ParameterType} objectType The type of property we need to create
        * @returns {JQuery} A valid jQuery object or null if this editor does not support this property.
        */
        PropColorPicker.prototype.edit = function (propertyName, propertyValue, objectType) {
            if (objectType != Animate.ParameterType.COLOR)
                return null;

            var parts = propertyValue.split(":");
            var color = parts[0];
            var alpha = parseFloat(parts[1]);

            var _id1 = "c" + Animate.Component.idCounter;
            Animate.Component.idCounter++;
            var _id2 = "c" + Animate.Component.idCounter;
            Animate.Component.idCounter++;

            this.mIDs.push(new PropColorPair(_id1, color));

            //Create HTML
            var editor = this.createEditorJQuery(propertyName, "<div style='width:100%; height:20px; background:url(media/map-opacity.png);' ><input style='width:80%; opacity:" + alpha + ";' class='color PropTextbox' id = '" + _id1 + "' value = '" + color + "' ></input><input id='" + _id2 + "' class='PropTextbox' style='width:19%; border-left:1px solid #CCC;' value='" + alpha + "'></input></div>", propertyValue);

            var that = this;

            //Functions to deal with user interactions with JQuery
            var onValueEdited = function (response, event) {
                var col = jQuery("#" + _id1).val();
                var alpha = jQuery("#" + _id2).val();
                jQuery("#" + _id1).css("opacity", alpha);
                that.notify(propertyName, col + ":" + alpha, objectType);
            };

            //Add listeners
            var input = jQuery("#" + _id2, editor);
            input.on("keyup", onValueEdited);
            jQuery("#" + _id1, editor).on("change", onValueEdited);
            editor.on("mouseup", onValueEdited);

            //Finall return editor as HTML to be added to the page
            return editor;
        };

        /**
        * Called when the editor is being added to the DOM
        */
        PropColorPicker.prototype.onAddedToDom = function () {
            var i = this.mIDs.length;
            while (i--) {
                var myPicker = new jscolor.color(document.getElementById(this.mIDs[i].id), {});
                myPicker.fromString(this.mIDs[i].color);
            }

            this.mIDs.splice(0, this.mIDs.length);
        };

        /**
        * Updates the value of the editor object  because a value was edited externally.
        * @param {any} newValue The new value
        * @param {JQuery} editHTML The JQuery that was generated by this editor that needs to be updated because something has updated the value externally.
        */
        PropColorPicker.prototype.update = function (newValue, editHTML) {
            //TODO
        };
        return PropColorPicker;
    })(Animate.PropertyGridEditor);
    Animate.PropColorPicker = PropColorPicker;
})(Animate || (Animate = {}));
//# sourceMappingURL=PropColorPicker.js.map
