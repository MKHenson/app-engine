var Animate;
(function (Animate) {
    var EditorContainer = (function () {
        function EditorContainer(editor, name, value) {
            this.editor = editor;
            this.propertyName = name;
            this.propertyValue = value;
        }
        return EditorContainer;
    })();

    /**
    * A simple interface for property grid editors
    */
    var PropertyGridEditor = (function () {
        function PropertyGridEditor(grid) {
            this._grid = grid;
            this.mEditors = [];
        }
        /**
        * Called when a property grid is editing an object. The property name, value and type are passed.
        * If this editor can edit the property it returns a valid JQuery object which is responsible for editing
        * the object. The property grid makes no effort to maintain this. It is up to the Editor to watch the JQuery through
        * events to see when its been interacted with. Once its been edited, the editor must notify the grid - to do this
        * call the notify method.
        * @param {string} propertyName The name of the property we are creating an HTML element for
        * @param {any} propertyValue The current value of that property
        * @param {ParameterType} objectType The type of property we need to create
        * @returns {JQuery} A valid jQuery object or null if this editor does not support this property.
        */
        PropertyGridEditor.prototype.edit = function (propertyName, propertyValue, objectType) {
            return null;
        };

        /**
        * Use this function to create a nice wrapper for any HTML you want to use as an editor. This will surround the html and css that makes
        * it fit in with the other property editors already available.
        */
        PropertyGridEditor.prototype.createEditorJQuery = function (propertyName, html, value) {
            var editor = jQuery("<div class='property-grid-label'>" + propertyName + "</div>" + "<div class='property-grid-value'>" + html + "</div >" + "<div class='fix' ></div > ");

            this.mEditors.push(new EditorContainer(editor, propertyName, value));
            return editor;
        };

        /**
        * Call this function to tell the grid that a property has been edited.
        */
        PropertyGridEditor.prototype.notify = function (propertyName, propertyValue, objectType) {
            this._grid.propUpdated(propertyName, propertyValue, objectType);
        };

        /* Cleans up the editor */
        PropertyGridEditor.prototype.dispose = function () {
            this.mEditors = null;
            this._grid = null;
        };

        /* This function is called when the grid is cleaning up all the editors. */
        PropertyGridEditor.prototype.cleanup = function () {
            var items = this.mEditors;
            var i = items.length;

            while (i--) {
                items[i].editor.off();
                items[i].editor.remove();
            }

            items.splice(0, items.length);
        };

        /**
        * Updates the value of the editor object  because a value was edited externally.
        * @param {any} newValue The new value
        * @param {JQuery} editHTML The JQuery that was generated by this editor that needs to be updated because something has updated the value externally.
        */
        PropertyGridEditor.prototype.update = function (newValue, editHTML) {
            throw Error("All PropertyGridEditors must implement the update function.");
        };

        /**
        * Called when the editor is being added to the DOM
        */
        PropertyGridEditor.prototype.onAddedToDom = function () {
        };
        return PropertyGridEditor;
    })();
    Animate.PropertyGridEditor = PropertyGridEditor;
})(Animate || (Animate = {}));
//# sourceMappingURL=PropertyGridEditor.js.map
