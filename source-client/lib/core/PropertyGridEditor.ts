module Animate
{
	class EditorContainer
	{
		public editor: JQuery;
		public propertyName: string;
		public propertyValue: any;

		constructor( editor : JQuery, name : string, value : any )
		{
			this.editor = editor;
			this.propertyName = name;
			this.propertyValue = value;
		}
	}

	/**
	* A simple interface for property grid editors 
	*/
	export class PropertyGridEditor
	{
		private _grid: PropertyGrid;
		private mEditors: Array<EditorContainer>;

		constructor( grid: PropertyGrid )
		{
			this._grid = grid;
			this.mEditors = [];
		}

		/**
		* Called when a property grid is editing an object. The property name, value and type are passed.
		* If this editor can edit the property it returns a valid JQuery object which is responsible for editing
		* the object. The property grid makes no effort to maintain this. It is up to the Editor to watch the JQuery through
		* events to see when its been interacted with. Once its been edited, the editor must notify the grid - to do this
		* call the notify method.
		* @param {string} propertyName The name of the property we are creating an HTML element for
		* @param {any} propertyValue The current value of that property
		* @param {ParameterType} objectType The type of property we need to create
		* @param {any} options Any options associated with the parameter
		* @returns {JQuery} A valid jQuery object or null if this editor does not support this property.
		*/
		edit( propertyName: string, propertyValue: any, objectType: ParameterType, options : any ): JQuery
		{
			return null;
		}

		/**
		* Use this function to create a nice wrapper for any HTML you want to use as an editor. This will surround the html and css that makes
		* it fit in with the other property editors already available.
		*/
		createEditorJQuery( propertyName : string, html : string, value : any ) : JQuery
		{
			var editor = jQuery(
				"<div class='property-grid-label'>" + propertyName + "</div>" +
				"<div class='property-grid-value'>" + html + "</div >" +
				"<div class='fix' ></div > "
				);

			this.mEditors.push( new EditorContainer( editor, propertyName, value ) );
			return editor;
		}

		/**
		* Call this function to tell the grid that a property has been edited.
		*/
		notify( propertyName: string, propertyValue: any, objectType: ParameterType )
		{
			this._grid.propUpdated( propertyName, propertyValue, objectType );
		}

		/* Cleans up the editor */
		dispose()
		{
			this.mEditors = null;
			this._grid = null;
		}

		/* This function is called when the grid is cleaning up all the editors. */
		cleanup()
		{
			var items: Array<EditorContainer> = this.mEditors;
			var i: number = items.length;

			while ( i-- )
			{
				items[i].editor.off();
				items[i].editor.remove();
			}

			items.splice( 0, items.length );
		}

		/**
		* Updates the value of the editor object  because a value was edited externally.
		* @param {any} newValue The new value
		* @param {JQuery} editHTML The JQuery that was generated by this editor that needs to be updated because something has updated the value externally.
		*/
		update( newValue: any, editHTML: JQuery ): void
		{
			throw Error( "All PropertyGridEditors must implement the update function." );
		}

		/**
		* Called when the editor is being added to the DOM
		*/
		onAddedToDom()
		{
		}
	}
}